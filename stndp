#!/usr/bin/env bash



#  stndp - v0.0.1
#  A command line tool for doing daily stand-ups.
#  Copyright (C) Kyle Brumm <http://kylebrumm.com>



# -------------------------------------------------------
# STNDP VARIABLES
# -------------------------------------------------------

VERSION="0.0.1"
RED=$(tput setaf 1);
GREEN=$(tput setaf 2);
YELLOW=$(tput setaf 3);
WHITE=$(tput setaf 7);
RESET=$(tput sgr0);

STNDP_INSTALL_PATH="${BASH_SOURCE[0]}"
STNDP_INSTALL_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
STNDP_DIR="$HOME/.stndp"
STNDP_CONFIG="$STNDP_DIR/config"



# -------------------------------------------------------
# STNDP HELPER FUNCTIONS
# -------------------------------------------------------

# Throw an error
error() {
    printf "${RED}Error:${WHITE} ${1}\n"
    exit
}

# Throw a warning
warn() {
    printf "${YELLOW}${1}${WHITE}\n"
}

# Throw a success message
success() {
    printf "${GREEN}${1}${WHITE}\n"
}

# Set up the necessary config variables
setup_project_config() {
    # Source the project config file if it exists
    if [ -f "$STNDP_DIR/$1" ]; then
        source "$STNDP_DIR/$1"
    fi
}

# Make a GET call to the API
api_get() {
    curl -s "https://api.airtable.com/v0/appm8UunN167VRpsT/$1$2" -H "Authorization: Bearer $STNDP_API_KEY"
}

# Make a POST call to the API
api_post() {
    curl -s -X POST "https://api.airtable.com/v0/appm8UunN167VRpsT/$1" -H "Authorization: Bearer $STNDP_API_KEY" -H "Content-type: application/json" -d "$2"
}



# -------------------------------------------------------
# STNDP COMMANDS
# -------------------------------------------------------

# ADD: Add a record new to the database
stndp_add() {
    response=$(api_post "$2" "$3")
    success "New record added to \"$2\"!"
    echo $response | jq
}

# CLEANUP: Remove all the config files
stndp_cleanup() {
    printf "This will remove all configuration files.\n"
    read -ep "Are you sure you want to run the cleanup? (y/N): " cleanup
    case $cleanup in
        [Yy]* )
            success "==> Cleanup"
            warn "Config files removed"
            rm -rf $STNDP_DIR
            ;;
        * )
            warn "Cleanup skipped"
            ;;
    esac
}

# HELP: Display the help information
stndp_help() {
cat <<EOF

stndp CLI - v${VERSION}

A command line tool for doing daily stand-ups.

Usage:
    stndp <command> <options>

Commands:
    add        Add a new record to the database
        users
        questions
        answers
    cleanup    Remove all config files
    help       Display this help text
    init       Initialize necessary config files
    list       List records from the database
        users
        questions
        answers
    start      Start the daily stand-up prompts
    status     List your teams responses for the current day
    latest     Download the latest version of stndp
    version    Display the current version

EOF
exit;
}

# LIST: List useful things
stndp_list() {
    # TODO
    # 1. Build a query string with additional arguments
    case "$2" in
        users)
            query='?sortField=name'
            response=$(api_get "$2" "$query")
            echo $response | jq '.records[].fields | {(.name): {username: .username, email:.email}}'
            ;;
        questions)
            response=$(api_get "$2")
            echo $response | jq '.records[].fields | .question'
            ;;
        answers)
            query='?sortField=date&sortDirection=desc'
            response=$(api_get "$2" "$query")
            echo $response | jq '[.records[].fields | {user: .user, question: .question_id, answer:.answer, date:.date}] | group_by(.date) | reverse'
            ;;
        *)
            error "Illegal list command -- $2 (see \"stndp --help\" for help)";;
    esac
}

# INIT: Set up the project files
stndp_init() {
    if [ $is_setup = true ]; then
        error "You have already run the setup task."
    fi

    success "==> Init${WHITE}"

    # Create directory if it doesn't exist
    if [ ! -d "$STNDP_DIR" ]; then
        mkdir $STNDP_DIR
        success "Directory created"
    fi

    # Create config file if it doesn't exist
    if [ ! -f "$STNDP_CONFIG" ]; then
        read -ep "STNDP_API_KEY: " api_key
        read -ep "STNDP_USERNAME: " username

        # Verify the users input
        printf "\n"
        printf "The following will be written to $STNDP_CONFIG:\n"
        printf "\n"
        printf "# stndp API Key\n"
        printf "STNDP_API_KEY=\"$api_key\"\n"
        printf "\n"
        printf "# stndp Username\n"
        printf "STNDP_USERNAME=\"$username\"\n"
        printf "\n"

        # Confirm
        read -ep "Everything look good? (Y/n): " good_to_go
        case $good_to_go in
            [Nn]* )
                warn "Config setup skipped"
                ;;
            * )
                success "Config file created"
                touch $STNDP_CONFIG
cat > $STNDP_CONFIG <<EOF
# stndp API Key
STNDP_API_KEY="$api_key"

# stndp Username
STNDP_USERNAME="$username"
EOF
                warn "\nThe config file can be modified at \"$STNDP_CONFIG\""
                ;;
        esac
    fi

}

# START: Start the daily stand-up prompts
stndp_start() {
    response=$(api_get 'questions')
    questions=$(echo $response | jq -r '[.records[] | .fields] | sort_by(.order)')

    date=$(date +%Y-%m-%d)
    num=0
    while [ 1 ]
    do
        if [[ $(echo $questions | jq -r ".[$num]") == "null" ]]; then
            break
        else
            id=$(echo $questions | jq -r ".[$num].id")
            question=$(echo $questions | jq -r ".[$num].question")

            read -ep "$WHITE$question " answer

            escaped_answer=$(printf "%q " $answer)
            data='{ "fields": { "date": "'$date'", "answer": "'$escaped_answer'", "user": "'$STNDP_USERNAME'", "question_id": "'$id'" } }'
            response=$(api_post "answers" "$data")

            if echo $response | grep "error" > /dev/null 2>&1; then
                message=$(echo $response | jq '.error.message')
                error "$message"
            fi

            success "Answer Updated âˆš\n"
        fi

        ((num++))
    done
}

# STATUS: List your teams responses for the current day
stndp_status() {
    query='?sortField=date&sortDirection=desc'
    response=$(api_get "answers" "$query")
    date=$(date +%Y-%m-%d)
    answers=$(echo $response | jq '[.records[].fields | {user: .user, question: .question_id, answer:.answer, date:.date} | select(.date == "'$date'")] | group_by(.question) | [.[] | sort_by(.user)]')

    question_response=$(api_get 'questions')
    questions=$(echo $question_response | jq -r '[.records[] | .fields] | sort_by(.order)')

    num=0
    while [ 1 ]
    do
        if [[ $(echo $questions | jq -r ".[$num]") == "null" ]]; then
            break
        else
            success "\n---\n"
            question=$(echo $questions | jq -r ".[$num].question")
            warn "$question"
            printf "$WHITE"
            echo $answers | jq -r '.['$num'][] | .user + ": " + .answer'
        fi

        ((num++))
    done

    success "\n---\n"
}

# LATEST: Update to the latest version of stndp
stndp_latest() {
    read -ep "Are you sure you want to update stndp? (y/N): " update
    case $update in
        [Yy]* )
            success "==> Update"
            # Remove the old script
            warn "Removing old script at \"$STNDP_INSTALL_PATH\"..."
            rm $STNDP_INSTALL_PATH

            # Download the new script
            warn "Downloading new script to \"$STNDP_INSTALL_DIR/stndp\"..."
            curl -s https://raw.githubusercontent.com/kjbrum/stndp/master/stndp > $STNDP_INSTALL_DIR/stndp
            chmod +x $STNDP_INSTALL_DIR/stndp
            ;;
        * )
            warn "Update Skipped"
            ;;
    esac
}

# VERSION: Display the current version
stndp_version() {
    printf "v$VERSION\n"
}



# -------------------------------------------------------
# STNDP INITIALIZATION
# -------------------------------------------------------

# Check if help info should be displayed
if [ "$1" = "-h" -o "$1" = "--help" -o -z "$1" ]; then
    stndp_help;
fi

# Check if the necessary files are set up
if [ -f "$STNDP_CONFIG" ]; then
    is_setup=true

    # Source the config file
    source "$STNDP_CONFIG"
else
    is_setup=false

    if [ "$1" != "init" -a "$1" != "version" ]; then
        error "You need to run \"stndp init\" to get things set up."
    fi
fi

# See what command we need to run
case "$1" in
    add)          stndp_add "$@";;
    cleanup)      stndp_cleanup "$@";;
    init)         stndp_init "$@";;
    list)         stndp_list "$@";;
    start)        stndp_start "$@";;
    status)       stndp_status "$@";;
    latest)       stndp_latest;;
    version)      stndp_version;;
    *)            error "Illegal command -- $1 (see \"stndp --help\" for help)";;
esac
